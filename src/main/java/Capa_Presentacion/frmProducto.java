package Capa_Presentacion;

import Capa_Datos.ImagenJChooser;
import Capa_Entidad.Categoria;
import Capa_Entidad.Producto;
import Capa_Negocio.Neg_Categoria;
import Capa_Negocio.Neg_MetodosGenerales;
import Capa_Negocio.Neg_Producto;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.math.BigDecimal;

import java.util.List;
import javax.swing.filechooser.FileNameExtensionFilter;

public class frmProducto extends javax.swing.JPanel {

    private final Neg_Producto negProducto = new Neg_Producto();
    private final Neg_Categoria negCategoria = new Neg_Categoria();
    private final Neg_MetodosGenerales metodosGeneralesDAO = new Neg_MetodosGenerales();

    public frmProducto() {
        initComponents();
        aplicarTemaMac();
        inicializarTablaProductos(); // Asegúrate de llamarlo aquí
        cargarProductos();  // Carga los productos
        cargarCategorias(); // Carga las categorías
        setInputFieldsEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtCategoriaID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        txtFoto = new javax.swing.JTextField();
        btnFoto = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblFoto = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        cboCategoria = new javax.swing.JComboBox<>();
        txtPrefijo = new javax.swing.JTextField();
        txtNombrePro = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducto = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(610, 540));

        Background.setBackground(new java.awt.Color(255, 255, 255));
        Background.setPreferredSize(new java.awt.Dimension(610, 540));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(590, 280));

        jLabel1.setText("ID:");

        jLabel3.setText("Categoria:");

        jLabel4.setText("Prefijo Pro:");

        jLabel5.setText("Categoria ID:");

        jLabel6.setText("Nombre:");

        jLabel7.setText("Precio:");

        jLabel2.setText("Cantidad:");

        btnFoto.setText("Buscar");
        btnFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFotoActionPerformed(evt);
            }
        });

        jLabel10.setText("Foto:");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        lblFoto.setPreferredSize(new java.awt.Dimension(155, 155));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblFoto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txtFoto))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5))
                    .addComponent(btnFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(13, 13, 13)
                .addComponent(txtFoto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel8.setText("Decripcion:");

        cboCategoria.setMaximumRowCount(20);
        cboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Seleccionar Categoria--" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(80, 80, 80)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addGap(36, 36, 36)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cboCategoria, 0, 192, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(txtPrefijo, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addComponent(jLabel2)
                        .addComponent(jLabel8)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(94, 94, 94)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(txtCantidad)
                                    .addGap(111, 111, 111))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(24, 24, 24)
                            .addComponent(txtCategoriaID))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel6))
                            .addGap(48, 48, 48)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                                .addComponent(txtNombrePro)))))
                .addGap(74, 74, 74)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(9, 9, 9))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(221, 221, 221))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPrefijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtCategoriaID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNombrePro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(238, 238, 238))))
        );

        jPanel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(590, 40));

        btnAgregar.setText("Agregar Producto");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnNuevo.setText("Nuevo Producto");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar Producto");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar Producto");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tblProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProducto);

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackgroundLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(248, 248, 248))
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.PREFERRED_SIZE, 610, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.PREFERRED_SIZE, 540, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        agregarProducto();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        limpiarCampos();
        setInputFieldsEnabled(true);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        modificarProducto();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        eliminarProducto();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFotoActionPerformed
        // TODO add your handling code here:
        buscarFoto();
    }//GEN-LAST:event_btnFotoActionPerformed

    private void tblProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductoMouseClicked
        // TODO add your handling code here:
        clicTablaProductos();

    }//GEN-LAST:event_tblProductoMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnFoto;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    public javax.swing.JComboBox<String> cboCategoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JTable tblProducto;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCategoriaID;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtFoto;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNombrePro;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtPrefijo;
    // End of variables declaration//GEN-END:variables
    public void buscarFoto() {

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Imágenes", "jpg", "jpeg", "png", "gif");
        chooser.setFileFilter(filter);

        // Crea la vista previa
        ImagenJChooser vistaPrevia = new ImagenJChooser();
        chooser.setAccessory(vistaPrevia);
        chooser.addPropertyChangeListener(vistaPrevia);

        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String imagePath = chooser.getSelectedFile().getAbsolutePath();
            txtFoto.setText(imagePath);

            // Muestra la imagen seleccionada en lblFoto
            try {
                ImageIcon imageIcon = new ImageIcon(imagePath);
                Image image = imageIcon.getImage().getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_SMOOTH);
                lblFoto.setIcon(new ImageIcon(image));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al cargar la imagen: " + e.getMessage());
            }
        }
    }

    private void aplicarTemaMac() {
        try {
            UIManager.setLookAndFeel(new FlatMacLightLaf());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
    }

    private void cargarProductos() {
        List<Producto> productos = negProducto.listarProductos(); // Asegúrate de que esta lista contenga datos
        DefaultTableModel modelo = (DefaultTableModel) tblProducto.getModel();
        modelo.setRowCount(0); // Limpiar la tabla existente antes de agregar nuevos datos

        for (Producto p : productos) {
            modelo.addRow(new Object[]{
                p.getIdProducto(),
                p.getNombre(),
                p.getCantidad(),
                p.getPrecio(),
                p.getDescripcion(),
                p.getIdCategoria(),
                p.getCodigoProducto(),
                p.getImagen() != null ? "Imagen disponible" : "Sin imagen"
            });
        }
    }

    private void inicializarTablaProductos() {
        // Define el modelo de la tabla con las columnas necesarias
        DefaultTableModel model = new DefaultTableModel();

        // Añadir las columnas al modelo
        model.addColumn("ID");
        model.addColumn("Nombre");
        model.addColumn("Cantidad");
        model.addColumn("Precio");
        model.addColumn("Descripción");
        model.addColumn("ID Categoría");
        model.addColumn("Código Producto");
        model.addColumn("Imagen");

        // Asignar el modelo a la tabla tblProducto
        tblProducto.setModel(model);

        // Ajustes adicionales para las columnas (opcional)
        tblProducto.getColumnModel().getColumn(0).setPreferredWidth(50);
        tblProducto.getColumnModel().getColumn(1).setPreferredWidth(150);
        tblProducto.getColumnModel().getColumn(2).setPreferredWidth(80);
        tblProducto.getColumnModel().getColumn(3).setPreferredWidth(80);
        tblProducto.getColumnModel().getColumn(4).setPreferredWidth(200);
        tblProducto.getColumnModel().getColumn(5).setPreferredWidth(80);
        tblProducto.getColumnModel().getColumn(6).setPreferredWidth(150);
        tblProducto.getColumnModel().getColumn(7).setPreferredWidth(80);
    }

    private boolean validarCamposProducto() {
        if (txtNombrePro.getText().trim().isEmpty()
                || txtCantidad.getText().trim().isEmpty()
                || txtPrecio.getText().trim().isEmpty()
                || txtCategoriaID.getText().trim().isEmpty()
                || txtFoto.getText().trim().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.");
            return false;
        }

        // Additional checks
        try {
            int cantidad = Integer.parseInt(txtCantidad.getText().trim());
            if (cantidad <= 0) {
                JOptionPane.showMessageDialog(this, "La cantidad debe ser un número positivo.");
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido.");
            return false;
        }

        try {
            BigDecimal precio = new BigDecimal(txtPrecio.getText().trim());
            if (precio.compareTo(BigDecimal.ZERO) <= 0) {
                JOptionPane.showMessageDialog(this, "El precio debe ser un número positivo.");
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El precio debe ser un número válido.");
            return false;
        }

        return true;
    }

    private void agregarProducto() {
        if (!validarCamposProducto()) {
            return; // Detener si la validación falla
        }

        // Recopilar datos del producto
        String nombreProducto = txtNombrePro.getText().trim();
        int cantidad = Integer.parseInt(txtCantidad.getText().trim());
        BigDecimal precio = new BigDecimal(txtPrecio.getText().trim());
        int idCategoria = Integer.parseInt(txtCategoriaID.getText().trim());
        String descripcion = txtDescripcion.getText().trim(); // Obtener descripción

        // Generar nuevo ID de producto
        int idProducto = new Neg_MetodosGenerales().obtenerProximoIdProducto();
        txtID.setText(String.valueOf(idProducto));

        // Tomar el prefijo existente de txtPrefijo
        String codigoProducto = txtPrefijo.getText().trim();
        if (codigoProducto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El código del producto no puede estar vacío.");
            return;
        }

        // Crear y guardar el producto
        Producto producto = new Producto();
        producto.setIdProducto(idProducto);
        producto.setNombre(nombreProducto);
        producto.setCantidad(cantidad);
        producto.setPrecio(precio);
        producto.setIdCategoria(idCategoria);
        producto.setCodigoProducto(codigoProducto); // Usar el prefijo existente
        producto.setDescripcion(descripcion); // Establecer la descripción

        File file = new File(txtFoto.getText().trim());
        byte[] imagen = ImagenJChooser.obtenerBytesImagen(file);
        producto.setImagen(imagen);

        negProducto.agregarProducto(producto);

        cargarProductos();
        limpiarCampos();
        JOptionPane.showMessageDialog(this, "Producto agregado exitosamente.");
    }

    private void modificarProducto() {
        // Validar que todos los campos estén llenos
        if (!validarCamposProducto()) {
            return; // Si algún campo está vacío, salir del método
        }

        // Obtener el producto seleccionado de la tabla
        int filaSeleccionada = tblProducto.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un producto para modificar");
            return;
        }

        // Obtener el ID del producto
        int idProducto = Integer.parseInt(tblProducto.getValueAt(filaSeleccionada, 0).toString());

        // Crear el objeto Producto con los nuevos datos
        Producto producto = new Producto();
        producto.setIdProducto(idProducto);
        producto.setNombre(txtNombrePro.getText().trim());
        producto.setCantidad(Integer.parseInt(txtCantidad.getText().trim()));
        producto.setPrecio(new BigDecimal(txtPrecio.getText().trim()));
        producto.setIdCategoria(Integer.parseInt(txtCategoriaID.getText().trim()));
        producto.setDescripcion(txtDescripcion.getText().trim()); // Establecer la descripción

        // Obtener la imagen seleccionada
        File file = new File(txtFoto.getText().trim());
        byte[] imagen = ImagenJChooser.obtenerBytesImagen(file);
        producto.setImagen(imagen);

        // Modificar el producto
        Neg_Producto negProducto = new Neg_Producto();
        negProducto.modificarProducto(producto);

        // Actualizar la tabla
        cargarProductos();
        JOptionPane.showMessageDialog(this, "Producto modificado exitosamente.");
        limpiarCampos();
    }

    private void eliminarProducto() {
        // Obtener el producto seleccionado de la tabla
        int filaSeleccionada = tblProducto.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un producto para eliminar");
            return;
        }

        // Confirmar la eliminación
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar este producto?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            // Obtener el ID del producto
            int idProducto = Integer.parseInt(tblProducto.getValueAt(filaSeleccionada, 0).toString());

            // Eliminar el producto
            Neg_Producto negProducto = new Neg_Producto();
            negProducto.eliminarProducto(idProducto);

            // Actualizar la tabla
            cargarProductos();
        }
        limpiarCampos();
    }

    private void limpiarCampos() {
        txtID.setText(""); // Limpiar el campo ID
        cboCategoria.setSelectedIndex(-1); // Volver a estado inicial (sin selección)
        txtNombrePro.setText(""); // Limpiar el campo de nombre
        txtCantidad.setText(""); // Limpiar el campo de cantidad
        txtPrecio.setText(""); // Limpiar el campo de precio
        txtCategoriaID.setText(""); // Limpiar el campo de ID de categoría
        txtFoto.setText(""); // Limpiar el campo de ruta de la foto
        txtDescripcion.setText(""); // Limpiar el campo de descripción
        lblFoto.setIcon(null); // Limpiar la imagen en la etiqueta de foto

        // Deshabilitar los campos (si se necesita)
        setInputFieldsEnabled(false);

        // Opcional: Mostrar el texto predeterminado en el ComboBox si no tiene "--Seleccionar categoría--"
        cboCategoria.insertItemAt("--Seleccionar categoría--", 0); // Asegúrate de que existe un elemento predeterminado
        cboCategoria.setSelectedIndex(0); // Seleccionar el índice del texto predeterminado
    }

    private void setInputFieldsEnabled(boolean enabled) {
        txtID.setEnabled(false);
        txtPrefijo.setEnabled(false);
        txtCategoriaID.setEnabled(false);
        txtNombrePro.setEnabled(enabled);
        txtCantidad.setEnabled(enabled);
        txtPrecio.setEnabled(enabled);
        txtFoto.setEnabled(enabled);
        txtDescripcion.setEnabled(enabled);
    }

    private void cargarCategorias() {
        // Obtener la lista de nombres de categorías desde la capa de negocio
        List<String> nombresCategorias = negCategoria.listarNombresCategorias();
        cboCategoria.removeAllItems(); // Limpiar elementos previos en el ComboBox

        for (String nombre : nombresCategorias) {
            cboCategoria.addItem(nombre); // Agregar nombre de categoría al ComboBox
        }

        // Escuchar cambios en el ComboBox
        cboCategoria.addActionListener((ActionEvent e) -> {
            int index = cboCategoria.getSelectedIndex();

            if (index != -1) {
                // Obtener el nombre de la categoría seleccionada
                String nombreCategoriaSeleccionada = cboCategoria.getSelectedItem().toString();

                // Obtener la categoría completa por su nombre
                Categoria categoriaSeleccionada = negCategoria.obtenerCategoriaPorNombre(nombreCategoriaSeleccionada);

                // Verificar que la categoría seleccionada no sea nula
                if (categoriaSeleccionada != null) {
                    // Mostrar el ID de la categoría en el campo txtCategoriaID
                    txtCategoriaID.setText(String.valueOf(categoriaSeleccionada.getIdCategoria()));

                    // Generar el código del producto basado en la categoría seleccionada
                    String codigoProducto = metodosGeneralesDAO.generarCodigoProducto(categoriaSeleccionada.getIdCategoria());

                    // Mostrar el código completo en el campo txtPrefijo
                    txtPrefijo.setText(codigoProducto); // Asigna el código completo a txtPrefijo

                    // Obtener el próximo ID de producto (secuencial, para todos los productos)
                    int proximoIdProducto = metodosGeneralesDAO.obtenerProximoIdProducto();
                    txtID.setText(String.valueOf(proximoIdProducto));
                } else {
                    // Manejar el caso de categoría no encontrada
                    System.err.println("Categoría no encontrada.");
                }
            }
        });
    }

    private void clicTablaProductos() {
        int filaSeleccionada = tblProducto.getSelectedRow();

        // Verificamos si se ha seleccionado una fila
        if (filaSeleccionada != -1) {
            // Extraemos los datos de la fila seleccionada
            try {
                int idProducto = Integer.parseInt(tblProducto.getValueAt(filaSeleccionada, 0) != null
                        ? tblProducto.getValueAt(filaSeleccionada, 0).toString() : "0");
                String nombre = tblProducto.getValueAt(filaSeleccionada, 1) != null
                        ? tblProducto.getValueAt(filaSeleccionada, 1).toString() : "";
                int cantidad = Integer.parseInt(tblProducto.getValueAt(filaSeleccionada, 2) != null
                        ? tblProducto.getValueAt(filaSeleccionada, 2).toString() : "0");
                double precio = Double.parseDouble(tblProducto.getValueAt(filaSeleccionada, 3) != null
                        ? tblProducto.getValueAt(filaSeleccionada, 3).toString() : "0");
                String descripcion = tblProducto.getValueAt(filaSeleccionada, 4) != null
                        ? tblProducto.getValueAt(filaSeleccionada, 4).toString() : "";
                int idCategoria = Integer.parseInt(tblProducto.getValueAt(filaSeleccionada, 5) != null
                        ? tblProducto.getValueAt(filaSeleccionada, 5).toString() : "0");
                String codigoProducto = tblProducto.getValueAt(filaSeleccionada, 6) != null
                        ? tblProducto.getValueAt(filaSeleccionada, 6).toString() : "";
                String imagen = tblProducto.getValueAt(filaSeleccionada, 7) != null
                        ? tblProducto.getValueAt(filaSeleccionada, 7).toString() : "";

                // Llenamos los campos de la interfaz gráfica
                txtID.setText(String.valueOf(idProducto));
                txtNombrePro.setText(nombre);
                txtCantidad.setText(String.valueOf(cantidad));
                txtPrecio.setText(String.valueOf(precio));
                txtDescripcion.setText(descripcion);
                txtCategoriaID.setText(String.valueOf(idCategoria));
                txtPrefijo.setText(codigoProducto);

                // Cargar la imagen del producto
                String nombreProducto = tblProducto.getValueAt(filaSeleccionada, 1).toString();
                // Suponiendo que la imagen está almacenada en una ruta específica
                String rutaImagen = "C:\\Users\\Eduardo\\Documents\\NetBeansProjects\\appSystemTechNova_CECA\\src\\main\\resources\\Productos\\" + nombreProducto + ".png";

                // Cargar la imagen
                File imgFile = new File(rutaImagen);
                if (imgFile.exists()) {
                    lblFoto.setIcon(new ImageIcon(imgFile.getAbsolutePath()));
                } else {
                    lblFoto.setIcon(null); // Limpiamos la imagen si no hay archivo
                }

                txtFoto.setText(rutaImagen);

                // Habilitamos los campos de entrada
                setInputFieldsEnabled(true);
            } catch (NumberFormatException e) {
                // Manejo de excepción para conversiones de número
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error en los datos seleccionados.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                // Manejo de excepción genérica
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Se produjo un error inesperado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Limpiar los campos si no se selecciona nada
            limpiarCampos();
        }
    }

}
