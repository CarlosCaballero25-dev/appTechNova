package Capa_Presentacion;

import Capa_Datos.*;
import Capa_Entidad.Usuario;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Image;
import java.io.File;
import java.sql.Date;
import java.util.List;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Eduardo
 */
public class frmEmpleado extends javax.swing.JPanel {

    /**
     * Creates new form Usuario
     */
    public frmEmpleado() {
        initComponents();
        aplicarTemaMac();
        nuevoUsuario();
        txtIdUsuario.setEnabled(false);
        inicializarTablaUsuarios();
        SwingUtilities.invokeLater(() -> {
            cargarUsuarios(); // Carga los usuarios en el hilo de despacho de eventos
            tblUsuario.setVisible(true); // Asegúrate de que la tabla sea visible
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgRol = new javax.swing.ButtonGroup();
        bgEstado = new javax.swing.ButtonGroup();
        Background = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtIdUsuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblFoto = new javax.swing.JLabel();
        txtFoto = new javax.swing.JTextField();
        btnBuscarFoto = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        rbAdministrador = new javax.swing.JRadioButton();
        rbEmpleado = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        rbActivo = new javax.swing.JRadioButton();
        rbInactivo = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        txtDNI = new javax.swing.JTextField();
        txtContraseña = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsuario = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnAgregarU = new javax.swing.JButton();
        NuevoAgregarU = new javax.swing.JButton();
        btnModificarU = new javax.swing.JButton();
        btnEliminarU = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(610, 540));

        Background.setBackground(new java.awt.Color(255, 255, 255));
        Background.setPreferredSize(new java.awt.Dimension(610, 540));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(590, 280));

        jLabel1.setText("ID:");

        jLabel3.setText("Usuario:");

        jLabel4.setText("Nombre y Apellido:");

        jLabel6.setText("Contraseña:");

        jLabel7.setText("Rol:");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(155, 155));

        lblFoto.setPreferredSize(new java.awt.Dimension(155, 155));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        btnBuscarFoto.setText("Buscar");
        btnBuscarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarFotoActionPerformed(evt);
            }
        });

        jLabel10.setText("Foto:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txtFoto))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel10))
                    .addComponent(btnBuscarFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(13, 13, 13)
                .addComponent(txtFoto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        rbAdministrador.setText("Administrador");

        rbEmpleado.setText("Empleado");

        jLabel8.setText("Telefono:");

        jLabel11.setText("Estado:");

        rbActivo.setText("Activo");

        rbInactivo.setText("Inactivo");

        jLabel9.setText("DNI:");

        jLabel2.setText("Fecha Nacimiento:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rbAdministrador)
                                .addGap(18, 18, 18)
                                .addComponent(rbEmpleado))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rbActivo)
                                .addGap(18, 18, 18)
                                .addComponent(rbInactivo))
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtTelefono, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                                .addComponent(txtContraseña, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDNI, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(56, 56, 56)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(9, 9, 9))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtIdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombre)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbAdministrador)
                            .addComponent(rbEmpleado)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbActivo)
                            .addComponent(rbInactivo)
                            .addComponent(jLabel11))
                        .addGap(233, 233, 233))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(245, 245, 245))))
        );

        tblUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblUsuario.setGridColor(new java.awt.Color(255, 255, 255));
        tblUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUsuarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblUsuario);

        jPanel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(590, 40));

        btnAgregarU.setText("Agregar Usuario");
        btnAgregarU.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregarU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarUActionPerformed(evt);
            }
        });

        NuevoAgregarU.setText("Nuevo Usuario");
        NuevoAgregarU.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        NuevoAgregarU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoAgregarUActionPerformed(evt);
            }
        });

        btnModificarU.setText("Modificar Usuario");
        btnModificarU.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnModificarU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarUActionPerformed(evt);
            }
        });

        btnEliminarU.setText("Eliminar Usuario");
        btnEliminarU.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarUActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(btnAgregarU)
                .addGap(21, 21, 21)
                .addComponent(NuevoAgregarU)
                .addGap(29, 29, 29)
                .addComponent(btnModificarU)
                .addGap(33, 33, 33)
                .addComponent(btnEliminarU))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAgregarU)
                    .addComponent(NuevoAgregarU)
                    .addComponent(btnModificarU)
                    .addComponent(btnEliminarU)))
        );

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarUActionPerformed
        // TODO add your handling code here:
        agregarUsuario();
    }//GEN-LAST:event_btnAgregarUActionPerformed

    private void NuevoAgregarUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoAgregarUActionPerformed
        // TODO add your handling code here:
        nuevoUsuario();
    }//GEN-LAST:event_NuevoAgregarUActionPerformed

    private void btnModificarUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarUActionPerformed
        // TODO add your handling code here:
        modificarUsuario();
    }//GEN-LAST:event_btnModificarUActionPerformed

    private void btnEliminarUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarUActionPerformed
        // TODO add your handling code here:
        eliminarUsuario();
    }//GEN-LAST:event_btnEliminarUActionPerformed

    private void btnBuscarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarFotoActionPerformed
        // TODO add your handling code here:
        buscarFoto();
    }//GEN-LAST:event_btnBuscarFotoActionPerformed

    private void tblUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUsuarioMouseClicked
        // TODO add your handling code here:
        clicTabla();
    }//GEN-LAST:event_tblUsuarioMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JButton NuevoAgregarU;
    private javax.swing.ButtonGroup bgEstado;
    private javax.swing.ButtonGroup bgRol;
    private javax.swing.JButton btnAgregarU;
    private javax.swing.JButton btnBuscarFoto;
    private javax.swing.JButton btnEliminarU;
    private javax.swing.JButton btnModificarU;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JRadioButton rbActivo;
    private javax.swing.JRadioButton rbAdministrador;
    private javax.swing.JRadioButton rbEmpleado;
    private javax.swing.JRadioButton rbInactivo;
    private javax.swing.JTable tblUsuario;
    private javax.swing.JTextField txtContraseña;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtFoto;
    private javax.swing.JTextField txtIdUsuario;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

    // METODOS USUARIOS
    public void buscarFoto() {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Imágenes", "jpg", "jpeg", "png", "gif");
        chooser.setFileFilter(filter);

        // Crea la vista previa
        ImagenJChooser vistaPrevia = new ImagenJChooser();
        chooser.setAccessory(vistaPrevia);
        chooser.addPropertyChangeListener(vistaPrevia);

        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String imagePath = chooser.getSelectedFile().getAbsolutePath();
            txtFoto.setText(imagePath);

            // Muestra la imagen seleccionada en lblFoto
            try {
                ImageIcon imageIcon = new ImageIcon(imagePath);
                Image image = imageIcon.getImage().getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_SMOOTH);
                lblFoto.setIcon(new ImageIcon(image));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al cargar la imagen: " + e.getMessage());
            }
        }
    }

    private void aplicarTemaMac() {
        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
    }

    private void cargarUsuarios() {
        // Método para cargar la lista de usuarios en tblUsuario desde la base de datos
        UsuarioDAO usuarioDAO = new UsuarioDAO();
        List<Usuario> listaUsuarios = usuarioDAO.listarUsuarios();

        // Verificar si se recuperaron usuarios
        System.out.println("Cantidad de usuarios recuperados: " + listaUsuarios.size());

        DefaultTableModel model = (DefaultTableModel) tblUsuario.getModel();
        model.setRowCount(0);  // Limpiar la tabla

        for (Usuario usuario : listaUsuarios) {
            Object[] row = {
                usuario.getIdUsuario(),
                usuario.getUsuario(),
                usuario.getNomape(),
                usuario.getFecna(),
                usuario.getPassword(),
                usuario.getDNI(),
                usuario.getTelefono(),
                usuario.getRol(),
                usuario.getEstado(),
                usuario.getImagen() != null ? "Imagen " + usuario.getIdUsuario() : "No"
            };
            model.addRow(row);
        }

        // Forzar a que la tabla se revalide y repinte
        tblUsuario.revalidate();
        tblUsuario.repaint();

        // Adicionalmente, fuerza a actualizar la vista
        tblUsuario.clearSelection(); // Limpiar selección
        tblUsuario.setFocusable(true); // Asegúrate de que la tabla pueda recibir el foco
        tblUsuario.requestFocusInWindow(); // Solicitar enfoque para la tabla
    }

    private void agregarUsuario() {
        // Validar que todos los campos estén llenos
        if (!validarCampos()) {
            return; // Si algún campo está vacío, se detiene el proceso
        }

        // Obtener y validar los datos
        String nombre = txtNombre.getText().trim();
        int dni = Integer.parseInt(txtDNI.getText().trim());
        String telefonoStr = txtTelefono.getText().trim(); // Obtener el teléfono como String

        // Validar el DNI y el teléfono
        if (!validarDNIyTelefono()) {
            return; // Si la validación falla, se detiene el proceso
        }

        // Convertir teléfono a entero
        int telefono = 0;
        try {
            telefono = Integer.parseInt(telefonoStr); // Convertir a int
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El teléfono debe ser un número válido.");
            return; // Detener el proceso si no es un número válido
        }

        Usuario usuario = new Usuario();
        usuario.setUsuario(txtUsuario.getText().trim());
        usuario.setNomape(nombre);
        usuario.setDNI(dni);

        // Convertir fecha de JDateChooser a java.sql.Date
        java.util.Date fechaNacimiento = jDateChooser1.getDate();
        if (fechaNacimiento != null) {
            usuario.setFecna(new java.sql.Date(fechaNacimiento.getTime()));
        }

        usuario.setPassword(txtContraseña.getText().trim());
        usuario.setTelefono(telefono); // Asignar el teléfono como int
        usuario.setRol(rbAdministrador.isSelected() ? "Administrador" : "Empleado");
        usuario.setEstado(rbActivo.isSelected() ? "Activo" : "Inactivo");

        // Obtener la imagen seleccionada
        File file = new File(txtFoto.getText().trim());
        byte[] imagen = ImagenJChooser.obtenerBytesImagen(file);
        usuario.setImagen(imagen);

        // Guardar el usuario
        UsuarioDAO usuarioDAO = new UsuarioDAO();
        usuarioDAO.guardarUsuario(usuario);

        // Actualizar la tabla
        cargarUsuarios();
    }

    private void eliminarUsuario() {
        // Obtener el usuario seleccionado de la tabla
        int filaSeleccionada = tblUsuario.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un usuario para eliminar");
            return;
        }

        // Confirmar la eliminación
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar este usuario?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            // Obtener el ID del usuario
            int idUsuario = Integer.parseInt(tblUsuario.getValueAt(filaSeleccionada, 0).toString());

            // Eliminar el usuario
            UsuarioDAO usuarioDAO = new UsuarioDAO();
            usuarioDAO.eliminarUsuario(idUsuario);

            // Actualizar la tabla
            cargarUsuarios();
        }
    }

    private void modificarUsuario() {
        // Validar que todos los campos estén llenos
        if (!validarCampos()) {
            return; // Si algún campo está vacío, salir del método
        }

        // Obtener el usuario seleccionado de la tabla
        int filaSeleccionada = tblUsuario.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un usuario para modificar");
            return;
        }

        // Obtener el ID del usuario
        int idUsuario = Integer.parseInt(tblUsuario.getValueAt(filaSeleccionada, 0).toString());

        // Crear el objeto Usuario con los nuevos datos
        Usuario usuario = new Usuario();
        usuario.setIdUsuario(idUsuario);
        usuario.setUsuario(txtUsuario.getText().trim());
        usuario.setNomape(txtNombre.getText().trim());

        // Convertir fecha de JDateChooser a java.sql.Date
        java.util.Date fechaNacimiento = jDateChooser1.getDate();
        if (fechaNacimiento != null) {
            usuario.setFecna(new java.sql.Date(fechaNacimiento.getTime()));
        }

        usuario.setPassword(txtContraseña.getText().trim());

        // Convertir teléfono a entero
        String telefonoStr = txtTelefono.getText().trim();
        int telefono = 0;
        try {
            telefono = Integer.parseInt(telefonoStr); // Convertir a int
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El teléfono debe ser un número válido.");
            return; // Detener el proceso si no es un número válido
        }

        usuario.setTelefono(telefono); // Asignar el teléfono como int
        usuario.setRol(rbAdministrador.isSelected() ? "Administrador" : "Empleado");
        usuario.setEstado(rbActivo.isSelected() ? "Activo" : "Inactivo");

        // Obtener la imagen seleccionada
        File file = new File(txtFoto.getText().trim());
        byte[] imagen = ImagenJChooser.obtenerBytesImagen(file);
        usuario.setImagen(imagen);

        // Modificar el usuario
        UsuarioDAO usuarioDAO = new UsuarioDAO();
        usuarioDAO.modificarUsuario(usuario);

        // Actualizar la tabla
        cargarUsuarios();
    }

    private void nuevoUsuario() {
        txtNombre.setText("");
        jDateChooser1.setDate(null);
        txtContraseña.setText("");
        txtTelefono.setText("");
        txtDNI.setText("");
        txtFoto.setText(""); // Asegúrate de limpiar el campo de texto para la foto
        lblFoto.setIcon(null); // Limpia la imagen

        // Seleccionar los valores por defecto para los roles y estado
        rbAdministrador.setSelected(true); // Por defecto, selecciona Administrador
        rbActivo.setSelected(true); // Por defecto, selecciona Activo

        // Obtener el próximo IdUsuario y mostrarlo en el txtUsuario (bloqueado)
        MetodosGeneralesDAO metodos = new MetodosGeneralesDAO();
        int proximoIdUsuario = metodos.obtenerProximoIdUsuario();
        txtIdUsuario.setText(String.valueOf(proximoIdUsuario));
        txtIdUsuario.setEnabled(false); // Bloquear el campo txtUsuario para que no sea editable

        // Habilitar los campos necesarios para ingresar un nuevo usuario
        txtUsuario.setEnabled(true);
        txtNombre.setEnabled(true);
        txtContraseña.setEnabled(true);
        txtTelefono.setEnabled(true);
        jDateChooser1.setEnabled(true);
        rbAdministrador.setEnabled(true);
        rbEmpleado.setEnabled(true);
        rbActivo.setEnabled(true);
        rbInactivo.setEnabled(true);
        txtFoto.setEnabled(true);
    }

    private void clicTabla() {
        int filaSeleccionada = tblUsuario.getSelectedRow();

        // Verificamos si se ha seleccionado una fila
        if (filaSeleccionada != -1) {
            // Extraemos los datos de la fila seleccionada
            try {
                int idUsuario = Integer.parseInt(tblUsuario.getValueAt(filaSeleccionada, 0) != null
                        ? tblUsuario.getValueAt(filaSeleccionada, 0).toString() : "0");
                String usuario = tblUsuario.getValueAt(filaSeleccionada, 1) != null
                        ? tblUsuario.getValueAt(filaSeleccionada, 1).toString() : "";
                String nomape = tblUsuario.getValueAt(filaSeleccionada, 2) != null
                        ? tblUsuario.getValueAt(filaSeleccionada, 2).toString() : "";
                Date fecna = (Date) tblUsuario.getValueAt(filaSeleccionada, 3); // Esto puede ser null
                String password = tblUsuario.getValueAt(filaSeleccionada, 4) != null
                        ? tblUsuario.getValueAt(filaSeleccionada, 4).toString() : "";
                int dni = Integer.parseInt(tblUsuario.getValueAt(filaSeleccionada, 5) != null
                        ? tblUsuario.getValueAt(filaSeleccionada, 5).toString() : "0");
                int telefono = Integer.parseInt(tblUsuario.getValueAt(filaSeleccionada, 6) != null
                        ? tblUsuario.getValueAt(filaSeleccionada, 6).toString() : "0");
                String rol = tblUsuario.getValueAt(filaSeleccionada, 7) != null
                        ? tblUsuario.getValueAt(filaSeleccionada, 7).toString() : "";
                String estado = tblUsuario.getValueAt(filaSeleccionada, 8) != null
                        ? tblUsuario.getValueAt(filaSeleccionada, 8).toString() : "";

                // Llenamos los campos de la interfaz gráfica
                txtIdUsuario.setText(String.valueOf(idUsuario));
                txtUsuario.setText(usuario);
                txtNombre.setText(nomape);
                txtContraseña.setText(password);
                txtDNI.setText(String.valueOf(dni));
                txtTelefono.setText(String.valueOf(telefono));
                jDateChooser1.setDate(fecna);

                // Establecemos el rol seleccionado en el grupo
                if ("Administrador".equals(rol)) {
                    rbAdministrador.setSelected(true);
                } else {
                    rbEmpleado.setSelected(true);
                }

                // Establecemos el estado seleccionado en el grupo
                if ("Activo".equals(estado)) {
                    rbActivo.setSelected(true);
                } else {
                    rbInactivo.setSelected(true);
                }

                // Cargar la imagen del usuario
                String nombreUsuario = tblUsuario.getValueAt(filaSeleccionada, 1).toString(); // Suponiendo que el nombre está en la columna 1

                // Construir la ruta de la imagen
                String rutaImagen = "C:\\Users\\Eduardo\\Documents\\NetBeansProjects\\appSystemTechNova_CECA\\src\\main\\resources\\Usuarios\\" + nombreUsuario + ".jpg";

                // Cargar la imagen
                File imgFile = new File(rutaImagen);
                if (imgFile.exists()) {
                    lblFoto.setIcon(new ImageIcon(imgFile.getAbsolutePath()));
                } else {
                    lblFoto.setIcon(null); // Limpiamos la imagen si no hay archivo
                }

                // Obtener el nombre del archivo de la foto y mostrarlo en txtFoto
                txtFoto.setText(rutaImagen);

                // Habilitamos los campos de entrada
                setInputFieldsEnabled(true);
            } catch (NumberFormatException e) {
                // Manejo de excepción para conversiones de número
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error en los datos seleccionados.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                // Manejo de excepción genérica
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Se produjo un error inesperado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Limpiar los campos si no se selecciona nada
            limpiarCampos();
        }
    }

// Método para habilitar o deshabilitar los campos
    private void setInputFieldsEnabled(boolean enabled) {
        txtUsuario.setEnabled(enabled);
        txtNombre.setEnabled(enabled);
        txtContraseña.setEnabled(enabled);
        txtTelefono.setEnabled(enabled);
        jDateChooser1.setEnabled(enabled);
        rbAdministrador.setEnabled(enabled);
        rbEmpleado.setEnabled(enabled);
        rbActivo.setEnabled(enabled);
        rbInactivo.setEnabled(enabled);
        txtFoto.setEnabled(enabled);
    }

    private boolean validarCampos() {
        if (txtUsuario.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo Usuario es obligatorio.");
            txtUsuario.requestFocus();
            return false;
        }
        if (txtNombre.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo Nombre es obligatorio.");
            txtNombre.requestFocus();
            return false;
        }
        if (txtContraseña.getText().trim().length() < 6) {
            JOptionPane.showMessageDialog(this, "La Contraseña debe tener al menos 6 caracteres.");
            txtContraseña.requestFocus();
            return false;
        }
        if (txtTelefono.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo Teléfono es obligatorio.");
            txtTelefono.requestFocus();
            return false;
        }
        if (jDateChooser1.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fecha de nacimiento.");
            jDateChooser1.requestFocus();
            return false;
        }
        if (txtFoto.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen.");
            txtFoto.requestFocus();
            return false;
        }
        return true;
    }

    private void limpiarCampos() {
        txtIdUsuario.setText("");
        txtUsuario.setText("");
        txtNombre.setText("");
        txtContraseña.setText("");
        txtDNI.setText("");
        txtTelefono.setText("");
        jDateChooser1.setDate(null);
        lblFoto.setIcon(null); // Limpia la imagen
        bgRol.clearSelection(); // Limpia selección de roles
        bgEstado.clearSelection(); // Limpia selección de estados
        setInputFieldsEnabled(false); // Deshabilitar campos
    }

    private void inicializarTablaUsuarios() {
        // Define el modelo de la tabla con las columnas necesarias
        DefaultTableModel model = new DefaultTableModel();

        // Añadir las columnas al modelo
        model.addColumn("ID");
        model.addColumn("Usuario");
        model.addColumn("Nombre y Apellido");
        model.addColumn("Fecha de Nacimiento");
        model.addColumn("Contraseña");
        model.addColumn("Teléfono");
        model.addColumn("DNI");
        model.addColumn("Rol");
        model.addColumn("Estado");
        model.addColumn("Imagen");

        // Asignar el modelo a la tabla tblUsuario
        tblUsuario.setModel(model);

        // Opcional: Establecer el ancho de las columnas o propiedades adicionales
        tblUsuario.getColumnModel().getColumn(0).setPreferredWidth(57);  // ID Usuario
        tblUsuario.getColumnModel().getColumn(1).setPreferredWidth(57); // Usuario
        tblUsuario.getColumnModel().getColumn(2).setPreferredWidth(57); // Nombre y Apellido
        tblUsuario.getColumnModel().getColumn(3).setPreferredWidth(57);
        tblUsuario.getColumnModel().getColumn(4).setPreferredWidth(57);
        tblUsuario.getColumnModel().getColumn(5).setPreferredWidth(57);
        tblUsuario.getColumnModel().getColumn(6).setPreferredWidth(57);
        tblUsuario.getColumnModel().getColumn(7).setPreferredWidth(57);
        tblUsuario.getColumnModel().getColumn(8).setPreferredWidth(57);
        tblUsuario.getColumnModel().getColumn(9).setPreferredWidth(57);

        // Ajustar el resto de las columnas según necesites
    }

    private boolean validarDNIyTelefono() {
        String dni = txtDNI.getText().trim();
        String telefono = txtTelefono.getText().trim();

        // Validación del DNI
        if (dni.length() != 8) {
            JOptionPane.showMessageDialog(this, "El DNI debe tener 8 dígitos.");
            txtDNI.requestFocus(); // Enfocar el campo DNI
            return false;
        }
        if (!dni.matches("\\d+")) { // Verificar que solo contenga números
            JOptionPane.showMessageDialog(this, "El DNI solo debe contener números.");
            txtDNI.requestFocus();
            return false;
        }

        // Validación del Teléfono
        if (telefono.length() < 7 || telefono.length() > 15) {
            JOptionPane.showMessageDialog(this, "El Teléfono debe tener entre 7 y 15 dígitos.");
            txtTelefono.requestFocus(); // Enfocar el campo Teléfono
            return false;
        }
        if (!telefono.matches("\\d+")) { // Verificar que solo contenga números
            JOptionPane.showMessageDialog(this, "El Teléfono solo debe contener números.");
            txtTelefono.requestFocus();
            return false;
        }

        // Si ambas validaciones son exitosas
        return true;
    }
}
