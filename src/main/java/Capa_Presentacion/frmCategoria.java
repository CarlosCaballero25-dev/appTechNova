package Capa_Presentacion;

import Capa_Datos.CategoriaDAO;
import Capa_Datos.MetodosGeneralesDAO;
import Capa_Entidad.Categoria;
import Capa_Negocio.Neg_Categoria;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.JTable;

/**
 *
 * @author Eduardo
 */
public class frmCategoria extends javax.swing.JPanel {

    private final Neg_Categoria negCategoria;

    /**
     * Creates new form Producto
     */
    public frmCategoria() {
        initComponents();
        aplicarTemaMac();
        nuevoCategoria();
        negCategoria = new Neg_Categoria();
        inicializarTablaCategoria();
        cargarCategorias();
        setInputFieldsCategoriaEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtCategoriaID = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtDescripcion = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtPrefijo = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCategoria = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        btnAgregarCat = new javax.swing.JButton();
        btnNuevoCat = new javax.swing.JButton();
        btnModificarCat = new javax.swing.JButton();
        btnEliminarCat = new javax.swing.JButton();

        Background1.setBackground(new java.awt.Color(255, 255, 255));
        Background1.setPreferredSize(new java.awt.Dimension(610, 540));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel8.setForeground(new java.awt.Color(255, 255, 255));
        jPanel8.setPreferredSize(new java.awt.Dimension(590, 140));

        jLabel8.setText("ID:");

        jLabel11.setText("Nombre:");

        jLabel12.setText("Descripcion:");

        jLabel13.setText("Prefijo:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel8))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel11))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel13)))
                .addGap(40, 40, 40)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCategoriaID, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrefijo, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtCategoriaID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtPrefijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(371, 371, 371))
        );

        jScrollPane2.setPreferredSize(new java.awt.Dimension(590, 402));

        tblCategoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblCategoria.setGridColor(new java.awt.Color(0, 0, 0));
        tblCategoria.setPreferredSize(new java.awt.Dimension(590, 590));
        tblCategoria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoriaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCategoria);

        jPanel11.setForeground(new java.awt.Color(255, 255, 255));
        jPanel11.setPreferredSize(new java.awt.Dimension(590, 48));

        btnAgregarCat.setText("Agregar Categoria");
        btnAgregarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCatActionPerformed(evt);
            }
        });

        btnNuevoCat.setText("Nuevo Categoria");
        btnNuevoCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoCatActionPerformed(evt);
            }
        });

        btnModificarCat.setText("Modificar Categoria");
        btnModificarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarCatActionPerformed(evt);
            }
        });

        btnEliminarCat.setText("Eliminar Categoria");
        btnEliminarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAgregarCat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNuevoCat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnModificarCat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEliminarCat)
                .addGap(7, 7, 7))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminarCat)
                    .addComponent(btnModificarCat)
                    .addComponent(btnNuevoCat)
                    .addComponent(btnAgregarCat))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout Background1Layout = new javax.swing.GroupLayout(Background1);
        Background1.setLayout(Background1Layout);
        Background1Layout.setHorizontalGroup(
            Background1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Background1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Background1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        Background1Layout.setVerticalGroup(
            Background1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Background1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Background1Layout.createSequentialGroup()
                .addContainerGap(292, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(248, 248, 248))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCatActionPerformed
        // TODO add your handling code here:
        agregarCategoria();
        cargarCategorias();
    }//GEN-LAST:event_btnAgregarCatActionPerformed

    private void btnNuevoCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoCatActionPerformed
        // TODO add your handling code here:
        // Limpiar los campos de entrada
        nuevoCategoria();


    }//GEN-LAST:event_btnNuevoCatActionPerformed

    private void btnModificarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarCatActionPerformed
        // TODO add your handling code here:
        modificarCategoria();
    }//GEN-LAST:event_btnModificarCatActionPerformed

    private void btnEliminarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCatActionPerformed
        // TODO add your handling code here:
        eliminarCategoria();
    }//GEN-LAST:event_btnEliminarCatActionPerformed

    private void tblCategoriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoriaMouseClicked
        clicTablaCategoria();
    }//GEN-LAST:event_tblCategoriaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background1;
    private javax.swing.JButton btnAgregarCat;
    private javax.swing.JButton btnEliminarCat;
    private javax.swing.JButton btnModificarCat;
    private javax.swing.JButton btnNuevoCat;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCategoria;
    private javax.swing.JTextField txtCategoriaID;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrefijo;
    // End of variables declaration//GEN-END:variables

    private void aplicarTemaMac() {
        try {
            UIManager.setLookAndFeel(new FlatMacLightLaf());
            SwingUtilities.updateComponentTreeUI(this); // Actualiza la UI
        } catch (UnsupportedLookAndFeelException e) {
        }
    }

    // Cargar categorías en la tabla tblCategoria
    private void cargarCategorias() {
        // Crear una instancia de CategoriaDAO
        CategoriaDAO categoriaDAO = new CategoriaDAO();
        List<Categoria> listaCategorias = categoriaDAO.listarCategorias();

        // Verificar la cantidad de categorías recuperadas
        System.out.println("Cantidad de categorías recuperadas: " + listaCategorias.size());

        DefaultTableModel model = (DefaultTableModel) tblCategoria.getModel();
        model.setRowCount(0); // Limpiar la tabla

        for (Categoria categoria : listaCategorias) {
            Object[] row = {
                categoria.getIdCategoria(),
                categoria.getNombre(),
                categoria.getDescripcion(),
                categoria.getPrefijo(),
            };
            model.addRow(row);
        }

        // Actualizar visualmente la tabla
        tblCategoria.revalidate();
        tblCategoria.repaint();
        tblCategoria.clearSelection();
        tblCategoria.setFocusable(true);
        tblCategoria.requestFocusInWindow();
    }

    private void inicializarTablaCategoria() {
        // Define el modelo de la tabla con las columnas necesarias, deshabilitando la edición de celdas
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Deshabilitar la edición de todas las celdas
                return false;
            }
        };

        // Añadir las columnas al modelo
        String[] columnas = {
            "ID",
            "Nombre",
            "Descripción",
            "Prefijo"
        };

        for (String columna : columnas) {
            model.addColumn(columna);
        }

        // Asignar el modelo a la tabla tblCategoria
        tblCategoria.setModel(model);

        // Ajustar el ancho de las columnas
        ajustarAnchoColumnas(tblCategoria);
    }

    private void ajustarAnchoColumnas(JTable table) {
        // Establecer un ancho preferido para las columnas
        table.getColumnModel().getColumn(0).setPreferredWidth(50);  // ID
        table.getColumnModel().getColumn(1).setPreferredWidth(200); // Nombre
        table.getColumnModel().getColumn(2).setPreferredWidth(200); // Descripción
        table.getColumnModel().getColumn(3).setPreferredWidth(200); // Prefijo
    }

    private void agregarCategoria() {
        // Validar los campos antes de continuar
        if (!validarCamposCategoria()) {
            return;
        }

        String nombre = txtNombre.getText().trim();
        String descripcion = txtDescripcion.getText().trim();
        String prefijo=txtPrefijo.getText().trim();

        // Crear una nueva categoría
        Categoria categoria = new Categoria();
        categoria.setNombre(nombre);
        categoria.setDescripcion(descripcion);
        categoria.setPrefijo(prefijo);

        // Crear una instancia de Neg_Categoria
        Neg_Categoria negCategoria = new Neg_Categoria();

        // Guardar la categoría en la base de datos y capturar la respuesta
        String respuesta = negCategoria.guardarCategoria(categoria);

        // Verificar la respuesta y actualizar la tabla
        if (respuesta.toLowerCase().contains("correctamente")) {
            // Actualizar la tabla
            cargarCategorias();

            // Limpiar los campos de texto después de agregar (opcional)
            txtNombre.setText("");
            txtDescripcion.setText("");
            txtPrefijo.setText("");

            // Mostrar un mensaje de confirmación
            JOptionPane.showMessageDialog(this, respuesta);
        } else {
            // Mostrar un mensaje de error
            JOptionPane.showMessageDialog(this, respuesta);
        }
        validarCamposCategoria();
    }

    private void modificarCategoria() {
        int filaSeleccionada = tblCategoria.getSelectedRow();

        if (filaSeleccionada != -1) { // Asegúrate de que hay una fila seleccionada
            // Obtener el modelo de la tabla
            DefaultTableModel model = (DefaultTableModel) tblCategoria.getModel();

            // Obtener los nuevos valores de los campos de texto
            String nuevoNombre = txtNombre.getText().trim();
            String nuevaDescripcion = txtDescripcion.getText().trim();
            String nuevoPrefijo =txtPrefijo.getText().trim();

            // Validar que los campos no estén vacíos
            if (nuevoNombre.isEmpty() || nuevaDescripcion.isEmpty() || nuevoPrefijo.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.");
                return;
            }

            // Obtener el ID de la categoría seleccionada
            int idCategoria = (int) model.getValueAt(filaSeleccionada, 0); // Asumiendo que el ID está en la columna 0

            // Crear una instancia de Neg_Categoria
            Neg_Categoria negCategoria = new Neg_Categoria();

            // Crear un objeto Categoria con los nuevos datos
            Categoria categoria = new Categoria();
            categoria.setIdCategoria(idCategoria);
            categoria.setNombre(nuevoNombre);
            categoria.setDescripcion(nuevaDescripcion);
            categoria.setPrefijo(nuevoPrefijo);

            // Actualizar la categoría en la base de datos
            String respuesta = negCategoria.actualizarCategoria(categoria);

            // Verificar la respuesta y actualizar la tabla
            if (respuesta.toLowerCase().contains("correctamente")) {
                // Actualizar solo la fila seleccionada en la tabla
                model.setValueAt(nuevoNombre, filaSeleccionada, 1); // Modificar el nombre
                model.setValueAt(nuevaDescripcion, filaSeleccionada, 2); // Modificar la descripción
                model.setValueAt(nuevoPrefijo, filaSeleccionada, 3);

                // Limpiar los campos de texto después de la modificación (opcional)
                txtNombre.setText("");
                txtDescripcion.setText("");
                txtPrefijo.setText("");

                // Mostrar un mensaje de confirmación
                JOptionPane.showMessageDialog(this, "Datos actualizados correctamente.");
            } else {
                // Mostrar un mensaje de error
                JOptionPane.showMessageDialog(this, respuesta);
            }
        } else {
            // Mostrar un mensaje de error si no hay una fila seleccionada
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila para modificar.");
        }
    }

    private void nuevoCategoria() {
        txtNombre.setText("");
        txtDescripcion.setText("");
        txtCategoriaID.setText(""); // Bloquear el campo si es necesario
        // Crear instancia de MetodosGeneralesDAO y obtener el próximo ID de categoría
        MetodosGeneralesDAO metodosGeneralesDAO = new MetodosGeneralesDAO();
        int proximoId = metodosGeneralesDAO.obtenerProximoIdCategoria();

        // Asignar el próximo ID al campo txtCategoriaID
        txtCategoriaID.setText(String.valueOf(proximoId));

    }

    private void setInputFieldsCategoriaEnabled(boolean enabled) {
        // Mantener el campo txtCategoriaID deshabilitado siempre
        txtCategoriaID.setEnabled(false);

        // Habilitar/deshabilitar los demás campos según sea necesario
        txtNombre.setEnabled(enabled);
        txtDescripcion.setEnabled(enabled);
    }

    private void clicTablaCategoria() {
        int filaSeleccionada = tblCategoria.getSelectedRow();

        if (filaSeleccionada != -1) { // Asegúrate de que hay una fila seleccionada
            // Obtener el modelo de la tabla
            DefaultTableModel model = (DefaultTableModel) tblCategoria.getModel();

            // Cargar los datos en los campos de texto
            txtCategoriaID.setText(model.getValueAt(filaSeleccionada, 0).toString());
            txtNombre.setText(model.getValueAt(filaSeleccionada, 1).toString());
            txtDescripcion.setText(model.getValueAt(filaSeleccionada, 2).toString());
            txtPrefijo.setText(model.getValueAt(filaSeleccionada, 3).toString());
        }
    }

    private void eliminarCategoria() {
        int filaSeleccionada = tblCategoria.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una categoría para eliminar.");
            return;
        }

        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar esta categoría?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            int idCategoria = Integer.parseInt(tblCategoria.getValueAt(filaSeleccionada, 0).toString());

            CategoriaDAO categoriaDAO = new CategoriaDAO();
            categoriaDAO.eliminarCategoria(idCategoria);

            cargarCategorias();
        }
    }

    private boolean validarCamposCategoria() {
        if (txtNombre.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo nombre de categoría es obligatorio.");
            return false;
        }
        if (txtDescripcion.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo descripción es obligatorio.");
            return false;
        }
        if (txtPrefijo.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo descripción es obligatorio.");
            return false;
        }
        return true;
    }

}
