package Capa_Presentacion;

import Capa_Datos.ClienteDAO;
import Capa_Datos.DetalleVentaDAO;
import Capa_Entidad.Cliente;
import Capa_Entidad.DetalleVenta;
import Capa_Entidad.Producto;
import Capa_Entidad.Usuario;
import Capa_Negocio.Neg_Cliente;
import Capa_Negocio.Neg_Producto;
import Capa_Negocio.Neg_Usuario;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import controlador.DetalleVentaPDF;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

public class frmVenta extends javax.swing.JPanel {

    private DefaultTableModel modeloTabla;
    private ArrayList<Producto> listaProductos;
    private ArrayList<Cliente> listaClientes;
    private String nombreUsuario;
    private frmMenu menu;
    private frmHistorial historial; // Guardamos una referencia al historial

    public frmVenta(frmMenu menu, frmHistorial historial) {
        initComponents();
        this.menu = menu;
        this.historial = historial; // Inicializa la referencia a frmHistorial
        this.nombreUsuario = menu.lblNombre.getText();
        aplicarTemaMac();
        inicializarTabla();
        cargarDatosClientes();
        cargarDatosProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cboCliente = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cboProducto = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnAñadir = new javax.swing.JButton();
        DcFechayHora = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVenta = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        btnVenta = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtSubTotal = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtIGV = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();
        txtEfectivo = new javax.swing.JTextField();
        txtCambio = new javax.swing.JTextField();
        btnCalcular = new javax.swing.JButton();

        Background2.setBackground(new java.awt.Color(255, 255, 255));
        Background2.setPreferredSize(new java.awt.Dimension(610, 540));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(590, 280));

        jLabel3.setText("Cliente:");

        cboCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        jLabel4.setText("Producto:");

        cboProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cboProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProductoActionPerformed(evt);
            }
        });

        jLabel1.setText("Cantidad:");

        btnAñadir.setText("Añadir");
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtCantidad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(DcFechayHora, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel2))
                    .addComponent(DcFechayHora, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(btnAñadir)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(369, 369, 369))
        );

        tblVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblVenta);

        jPanel8.setForeground(new java.awt.Color(255, 255, 255));
        jPanel8.setPreferredSize(new java.awt.Dimension(590, 40));

        btnVenta.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Compra.png"))); // NOI18N
        btnVenta.setText("Registrar Venta");
        btnVenta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVenta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVentaActionPerformed(evt);
            }
        });

        jLabel5.setText("SubTotal:");

        jLabel6.setText("IGV:");

        jLabel7.setText("Total a pagar:");

        jLabel8.setText("Efectivo:");

        jLabel9.setText("Cambio:");

        btnCalcular.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnCalcular.setText("Calcular Cambio");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSubTotal)
                            .addComponent(txtIGV, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTotal)
                            .addComponent(txtEfectivo)
                            .addComponent(txtCambio))))
                .addGap(18, 18, 18)
                .addComponent(btnCalcular, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtIGV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnCalcular, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtEfectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtCambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(btnVenta)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout Background2Layout = new javax.swing.GroupLayout(Background2);
        Background2.setLayout(Background2Layout);
        Background2Layout.setHorizontalGroup(
            Background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Background2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        Background2Layout.setVerticalGroup(
            Background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Background2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Background2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(248, 248, 248))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProductoActionPerformed
        Object selectedItem = cboProducto.getSelectedItem();
        if (selectedItem != null) {
            String productoSeleccionado = selectedItem.toString();
            for (Producto producto : listaProductos) {
                if (producto.getNombre().equals(productoSeleccionado)) {
                    // Manejar producto seleccionado
                    break;
                }
            }
        } else {
            System.out.println("No se ha seleccionado ningún producto.");
        }
    }//GEN-LAST:event_cboProductoActionPerformed

    private void btnVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVentaActionPerformed
        List<DetalleVenta> listaDetalles = new ArrayList<>();
        try {
            String nombreCliente = obtenerClienteData();
            if (nombreCliente == null) {
                return; // Si no se encontró un cliente, salir
            }

            double totalFinal = procesarDetalles(listaDetalles, nombreCliente);
            boolean registrado = registrarVentas(listaDetalles);

            if (registrado) {
                JOptionPane.showMessageDialog(this, "Ventas registradas exitosamente!", "Registro Exitoso", JOptionPane.INFORMATION_MESSAGE);
                historial.actualizarHistorialVentas();
                String direccionCliente = "Dirección del cliente"; // Asigna la dirección del cliente
                String fechaVenta = "2024-10-02"; // Asigna la fecha de la venta
                generarFacturaPDF(nombreCliente, totalFinal, direccionCliente, fechaVenta);
            } else {
                JOptionPane.showMessageDialog(this, "Error al registrar una o más ventas.", "Error de Registro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese valores numéricos válidos.", "Error de Formato", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnVentaActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        // TODO add your handling code here:
        calcular();
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
        // TODO add your handling code here:
        añadirProductos();
    }//GEN-LAST:event_btnAñadirActionPerformed
    // New method for validating input

    private double procesarDetalles(List<DetalleVenta> listaDetalles, String nombreCliente) {
        double totalFinal = 0.0;
        for (int i = 0; i < tblVenta.getRowCount(); i++) {
            String productoNombre = tblVenta.getValueAt(i, 0).toString();

            // Validar que la cantidad es un número
            int cantidad;
            try {
                if (tblVenta.getValueAt(i, 1) == null || tblVenta.getValueAt(i, 1).toString().trim().isEmpty()) {
                    throw new NumberFormatException("Cantidad no válida");
                }
                cantidad = Integer.parseInt(tblVenta.getValueAt(i, 1).toString());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido en la fila " + (i + 1) + ".", "Error", JOptionPane.ERROR_MESSAGE);
                return totalFinal;
            }

            // Validar que el precio es un número
            String precioStr = tblVenta.getValueAt(i, 2) != null ? tblVenta.getValueAt(i, 2).toString() : "";
            double precioUnitario;
            try {
                if (precioStr.isEmpty()) {
                    throw new NumberFormatException("Precio vacío");
                }
                // Remover cualquier prefijo de moneda (como S/) y espacios
                precioStr = precioStr.replace("S/", "").trim();
                precioUnitario = Double.parseDouble(precioStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El precio unitario debe ser un número válido en la fila " + (i + 1) + ".", "Error", JOptionPane.ERROR_MESSAGE);
                return totalFinal;
            }

            // Crear y agregar el detalle de venta a la lista
            DetalleVenta detalle = crearDetalleVenta(i, cantidad, nombreCliente, precioUnitario, productoNombre);
            if (detalle != null) {
                listaDetalles.add(detalle);
                totalFinal += detalle.getTotalPagar();
            }
        }
        return totalFinal;
    }

    private DetalleVenta crearDetalleVenta(int index, int cantidad, String nombreCliente, double precioUnitario, String productoNombre) {
        double subtotal = cantidad * precioUnitario;
        double igv = subtotal * 0.10; // Ajusta el IGV según tu necesidad
        double totalPagar = subtotal + igv;

        // Crear objeto DetalleVenta
        DetalleVenta detalle = new DetalleVenta();
        detalle.setIdDetalleVenta(index);
        detalle.setCantidad(cantidad);
        detalle.setSubtotal(subtotal);
        detalle.setIgv(igv);
        detalle.setTotalPagar(totalPagar);
        detalle.setNombreProducto(productoNombre);  // Ahora estamos pasando productoNombre directamente
        detalle.setPrecioUnitario(precioUnitario);
        detalle.setNombreCliente(nombreCliente);
        detalle.setNombreUsuario(nombreUsuario);  // Asegúrate de que nombreUsuario esté definido en tu contexto
        return detalle;
    }

    private boolean registrarVentas(List<DetalleVenta> listaDetalles) {
        DetalleVentaDAO detalleDAO = new DetalleVentaDAO();
        for (DetalleVenta detalle : listaDetalles) {
            if (detalle == null || !detalleDAO.guardarVenta(detalle)) {
                JOptionPane.showMessageDialog(this, "Error al registrar la venta: " + detalle.getNombreProducto(), "Error de Registro", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true; // Todas las ventas se registraron correctamente
    }

    private void generarFacturaPDF(String nombreCliente, double totalFinal, String direccionCliente, String fechaVenta) {
        try {
            DetalleVentaPDF pdf = new DetalleVentaPDF(tblVenta, nombreCliente, nombreUsuario, direccionCliente, 0, "", "", totalFinal, fechaVenta);
            pdf.generarFacturaPDF();
            JOptionPane.showMessageDialog(this, "Factura generada exitosamente!", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al generar la factura: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String obtenerClienteData() {
        String nombreCliente = null;
        if (cboCliente.getSelectedItem() != null && !cboCliente.getSelectedItem().toString().equals("Seleccionar Cliente")) {
            nombreCliente = cboCliente.getSelectedItem().toString();
            ClienteDAO clienteDAO = new ClienteDAO();
            Cliente cliente = clienteDAO.obtenerClientePorNombre(nombreCliente);
            if (cliente == null) {
                JOptionPane.showMessageDialog(this, "No se pudo encontrar el cliente.", "Cliente No Encontrado", JOptionPane.WARNING_MESSAGE);
                return null;
            }
            return nombreCliente; // Return the valid client name
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un cliente.", "Cliente No Seleccionado", JOptionPane.WARNING_MESSAGE);
            return null;
        }
    }

    private boolean isValidInput(String cantidadStr, String subTotalStr, String igvStr, String totalStr) {
        return !(cantidadStr.isEmpty() || !isNumeric(cantidadStr));
    }

    private boolean isNumeric(String str) {
        if (str == null || str.isEmpty()) {
            return false;
        }
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    // Other methods like btnCalcularActionPerformed and btnAñadirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background2;
    private com.toedter.calendar.JDateChooser DcFechayHora;
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnVenta;
    private javax.swing.JComboBox<String> cboCliente;
    private javax.swing.JComboBox<String> cboProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblVenta;
    private javax.swing.JTextField txtCambio;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtEfectivo;
    private javax.swing.JTextField txtIGV;
    private javax.swing.JTextField txtSubTotal;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
     // Declara fuera de los métodos, a nivel de clase

    private void inicializarTabla() {
        modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("Producto");
        modeloTabla.addColumn("Cantidad");
        modeloTabla.addColumn("Precio Unitario");
        modeloTabla.addColumn("Subtotal");
        modeloTabla.addColumn("Fecha");
        tblVenta.setModel(modeloTabla);
    }

    private void cargarDatosClientes() {
        Neg_Cliente negCliente = new Neg_Cliente();
        listaClientes = new ArrayList<>(negCliente.listarClientes());

        cboCliente.removeAllItems();
        cboCliente.addItem("Seleccionar Cliente");

        for (Cliente cliente : listaClientes) {
            cboCliente.addItem(cliente.getNomape());
        }
    }

    private void cargarDatosProductos() {
        Neg_Producto negProducto = new Neg_Producto();
        listaProductos = new ArrayList<>(negProducto.listarProductos());

        cboProducto.removeAllItems();
        HashSet<String> productosUnicos = new HashSet<>();
        cboProducto.addItem("Seleccionar Producto");

        for (Producto producto : listaProductos) {
            if (productosUnicos.add(producto.getNombre())) {
                cboProducto.addItem(producto.getNombre());
            }
        }
    }

    private void añadirProductos() {
        String productoSeleccionado = cboProducto.getSelectedItem().toString();
        int cantidad = Integer.parseInt(txtCantidad.getText());

        double precioUnitario = 0.0;
        for (Producto producto : listaProductos) {
            if (producto.getNombre().equals(productoSeleccionado)) {
                precioUnitario = producto.getPrecio().doubleValue();
                break;
            }
        }

        double subtotal = precioUnitario * cantidad;

        java.util.Date fechaSeleccionada = DcFechayHora.getDate();
        String fechaFormateada = "";
        if (fechaSeleccionada != null) {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            fechaFormateada = sdf.format(fechaSeleccionada);
        }

        modeloTabla.addRow(new Object[]{productoSeleccionado, cantidad, precioUnitario, subtotal, fechaFormateada});
        calcularSubTotal();
    }

    private void calcularSubTotal() {
        double subtotal = 0.0;

        for (int i = 0; i < tblVenta.getRowCount(); i++) {
            subtotal += Double.parseDouble(tblVenta.getValueAt(i, 3).toString());
        }

        txtSubTotal.setText("S/ " + String.format("%.2f", subtotal));

        double igv = subtotal * 0.10;
        double total = subtotal + igv;

        txtIGV.setText("S/ " + String.format("%.2f", igv));
        txtTotal.setText("S/ " + String.format("%.2f", total));
    }

    private void calcular() {
        if (txtEfectivo.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un monto efectivo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double subtotal = Double.parseDouble(txtSubTotal.getText().replace("S/ ", "").trim());
        double igv = subtotal * 0.10;
        double total = subtotal + igv;

        txtIGV.setText("S/ " + String.format("%.2f", igv));
        txtTotal.setText("S/ " + String.format("%.2f", total));

        double efectivo = Double.parseDouble(txtEfectivo.getText().replace("S/ ", "").trim());

        if (efectivo < total) {
            JOptionPane.showMessageDialog(this, "El efectivo ingresado es insuficiente.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double cambio = efectivo - total;
        txtCambio.setText("S/ " + String.format("%.2f", cambio));

    }

    private void aplicarTemaMac() {
        try {
            UIManager.setLookAndFeel(new FlatMacLightLaf());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
